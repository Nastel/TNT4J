/*
 * Copyright (c) 2014 Nastel Technologies, Inc. All Rights Reserved.
 *
 * This software is the confidential and proprietary information of Nastel
 * Technologies, Inc. ("Confidential Information").  You shall not disclose
 * such Confidential Information and shall use it only in accordance with
 * the terms of the license agreement you entered into with Nastel
 * Technologies.
 *
 * NASTEL MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
 * THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE, OR NON-INFRINGEMENT. NASTEL SHALL NOT BE LIABLE FOR ANY DAMAGES
 * SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING
 * THIS SOFTWARE OR ITS DERIVATIVES.
 *
 *
 */
package com.nastel.jkool.tnt4j.dump;

import java.util.EventObject;
import java.util.List;

/**
 * <p>
 * An event class for reporting dump state change events.
 * </p>
 * <p>
 * The following standard events are generated by typical dump (event types are defined in <code>DumpProvider</code>):
 * </p>
 * 
 * <p>
 * DUMP_BEFORE -- generated before dump is written to destination(s)
 * </p>
 * <p>
 * DUMP_AFTER -- generated after dump is written to destination(s)
 * </p>
 * <p>
 * DUMP_COMPLETE -- all dump processing has been completed
 * </p>
 * <p>
 * DUMP_ERROR -- error occurred during dump process
 * </p>
 * 
 * @see DumpSink
 * @see DumpCollection
 * @see DumpProvider
 * 
 * @version $Revision: 6 $
 * 
 */
public class DumpEvent extends EventObject {
	/**
     * 
     */
	private static final long serialVersionUID = 1L;
	private static final String TYPE_STRING[] = { "DUMP_BEFORE", "DUMP_AFTER", "DUMP_COMPLETE", "DUMP_ERROR",
	        "DUMP_UNKNOWN" };
	private static final int LAST_EVENT_INDEX = (TYPE_STRING.length -1);

	private int type;
	private DumpCollection dumpCollection;
	private List<DumpSink> dumpDest;
	private Throwable error = null;

	/**
	 * Create a dump event with specific parameters
	 * 
	 * @param source
	 *            of the event
	 * @param tp
	 *            event type described in <code>DumpProvider</code>
	 * @param dump
	 *            collection on which event occurred
	 * @param list
	 *            of dump destinations for which dump event is generated
	 * @see DumpCollection
	 * @see DumpSink
	 */
	public DumpEvent(Object source, int tp, DumpCollection dump, List<DumpSink> list) {
		this(source, tp, dump, list, null);
	}

	/**
	 * Create a dump event with specific parameters
	 * 
	 * @param source
	 *            of the event
	 * @param tp
	 *            event type described in <code>DumpProvider</code>
	 * @param dump
	 *            collection on which event occurred
	 * @param list
	 *            of dump destinations for which dump event is generated
	 * @param ex
	 *            error occurred during the dump process
	 * @see DumpCollection
	 * @see DumpSink
	 * 
	 */
	public DumpEvent(Object source, int tp, DumpCollection dump, List<DumpSink> list, Throwable ex) {
		super(source);
		type = tp;
		dumpCollection = dump;
		dumpDest = list;
		error = ex;
	}

	/**
	 * Get the associated event type
	 * 
	 * @return event type as defined in <code>DumpProvider</code>
	 * 
	 */
	public int getType() {
		return type;
	}

	/**
	 * Get the associated event type string
	 * 
	 * @return event type as defined in <code>DumpProvider</code>
	 * 
	 */
	public String getTypeString() {
		return (type >= 0 && type <= DumpProvider.DUMP_ERROR) ? TYPE_STRING[type] : TYPE_STRING[LAST_EVENT_INDEX];
	}

	/**
	 * Get key associated with the event
	 * 
	 * @return key
	 * 
	 */
	public DumpCollection getDump() {
		return dumpCollection;
	}

	/**
	 * Get value associated with the event
	 * 
	 * @return value
	 * 
	 */
	public List<DumpSink> getDestinations() {
		return dumpDest;
	}

	/**
	 * Get error associated with the event
	 * 
	 * @return error
	 * 
	 */
	public Throwable getCause() {
		return error;
	}

	@Override
	public String toString() {
		return super.toString() 
			+ "{Type:" + getTypeString() 
			+ ", Dump: " + dumpCollection 
			+ ", SinkList: " + dumpDest
		    + ", Error: " + (error != null) 
		    + "}";
	}

}
