
; Default logger configuration
{
	source: default.logger
	source.factory: com.jkoolcloud.tnt4j.source.SourceFactoryImpl
	
	tracker.factory: com.jkoolcloud.tnt4j.tracker.DefaultTrackerFactory
	dump.sink.factory: com.jkoolcloud.tnt4j.dump.DefaultDumpSinkFactory
	event.sink.factory: com.jkoolcloud.tnt4j.sink.impl.FileEventSinkFactory
	event.formatter: com.jkoolcloud.tnt4j.format.SimpleFormatter
	tracking.selector: com.jkoolcloud.tnt4j.selector.DefaultTrackingSelector
	tracking.selector.Repository: com.jkoolcloud.tnt4j.repository.FileTokenRepository
}

;Default tracking configuration for all sources (source: *),
;used only if no other stanza matches.
{
	source: *
	like: default.logger
	
	source.factory.GEOADDR: New York
	source.factory.DATACENTER: MyDatacenter
	source.factory.RootFQN: RUNTIME=?#SERVER=?#NETADDR=?#DATACENTER=?#GEOADDR=?
	source.factory.RootSSN: tnt4j-stream
}

; Configuration for TrackingLogger
{
	source: com.jkoolcloud.tnt4j.TrackingLogger
	like: default.logger
	source.factory.RootSSN: tnt4j-tracker
}

;Example of using BroadcastingEventSinkFactory, allowing broadcasting writes to
;multiple independent event sinks.
{
	source: jkoolcloud.sinks

	source.factory: com.jkoolcloud.tnt4j.source.SourceFactoryImpl
	tracker.factory: com.jkoolcloud.tnt4j.tracker.DefaultTrackerFactory
	dump.sink.factory: com.jkoolcloud.tnt4j.dump.DefaultDumpSinkFactory

	; event sink configuration: destination and data format
	event.formatter: com.jkoolcloud.tnt4j.format.JSONFormatter

	; BroadcastingEventSinkFactory allows publishing events to multiple sinks
	; can be configured with multiple event sinks using '.EventSinkFactory.<sink-no>.'
	event.sink.factory: com.jkoolcloud.tnt4j.sink.impl.BroadcastingEventSinkFactory

	; Configure default sink filter based on level and time (elapsed/wait)
	event.sink.factory.Filter: com.jkoolcloud.tnt4j.filters.EventLevelTimeFilter
	event.sink.factory.Filter.Level: TRACE
	event.sink.factory.Filter.SuppressDups: true
	event.sink.factory.Filter.SuppressTimeSec: 30
	event.sink.factory.Filter.SuppressCacheSize: 500
	;event.sink.factory.Filter.SuppressUseSoundex: true
	;event.sink.factory.Filter.ElapsedUsec: 100
	;event.sink.factory.Filter.WaitUsec: 100

	; production environment (event sink 0)
	event.sink.factory.EventSinkFactory.0: com.jkoolcloud.tnt4j.sink.impl.BufferedEventSinkFactory
	event.sink.factory.EventSinkFactory.0.PooledLoggerFactory: com.jkoolcloud.tnt4j.sink.impl.PooledLoggerFactoryImpl
	event.sink.factory.EventSinkFactory.0.PooledLoggerFactory.Name: JKOOL-PROD
	event.sink.factory.EventSinkFactory.0.PooledLoggerFactory.Size: 5
	event.sink.factory.EventSinkFactory.0.PooledLoggerFactory.Capacity: 1000

	event.sink.factory.EventSinkFactory.0.EventSinkFactory: com.jkoolcloud.jesl.tnt4j.sink.JKCloudEventSinkFactory
	event.sink.factory.EventSinkFactory.0.EventSinkFactory.Filename: prod-jkoocloud.json
	event.sink.factory.EventSinkFactory.0.EventSinkFactory.Url: https://data.jkoolcloud.com
	event.sink.factory.EventSinkFactory.0.EventSinkFactory.Token: access-token

	; test environment (event sink 1)
	event.sink.factory.EventSinkFactory.1: com.jkoolcloud.tnt4j.sink.impl.BufferedEventSinkFactory
	event.sink.factory.EventSinkFactory.1.PooledLoggerFactory: com.jkoolcloud.tnt4j.sink.impl.PooledLoggerFactoryImpl
	event.sink.factory.EventSinkFactory.1.PooledLoggerFactory.Name: JKOOL-TEST
	event.sink.factory.EventSinkFactory.1.PooledLoggerFactory.Size: 5
	event.sink.factory.EventSinkFactory.1.PooledLoggerFactory.Capacity: 1000

	event.sink.factory.EventSinkFactory.1.EventSinkFactory: com.jkoolcloud.jesl.tnt4j.sink.JKCloudEventSinkFactory
	event.sink.factory.EventSinkFactory.1.EventSinkFactory.Filename: test-jkoocloud.json
	event.sink.factory.EventSinkFactory.1.EventSinkFactory.Url: https://test.jkoolcloud.com:6585
	event.sink.factory.EventSinkFactory.1.EventSinkFactory.Token: access-token
}

; Example of logging configuration using multiple cloud event sinks via sink definitions
; specified in 'jkoolcloud.sinks' stanza.
{
	source: com.myappl.name
	; import definitions from jkoolcloud.sinks stanza
	like: jkoolcloud.sinks
	
	source.factory.GEOADDR: Melville, NY
	source.factory.DATACENTER: QA-DC
	source.factory.RootFQN: RUNTIME=?#SERVER=?#NETADDR=?#DATACENTER=?#GEOADDR=?	
	source.factory.RootSSN: myappl-name
	
	activity.listener: com.jkoolcloud.tnt4j.tracker.DefaultActivityListener
	tracking.selector: com.jkoolcloud.tnt4j.selector.DefaultTrackingSelector
	tracking.selector.Repository: com.jkoolcloud.tnt4j.repository.FileTokenRepository
}

;Stanza used for sources that start with com.jkoolcloud
{
	source: com.jkoolcloud
	
	source.factory: com.jkoolcloud.tnt4j.source.SourceFactoryImpl
	source.factory.GEOADDR: New York
	source.factory.DATACENTER: MyDatacenter
	source.factory.RootFQN: RUNTIME=?#SERVER=?#NETADDR=?#DATACENTER=?#GEOADDR=?
	source.factory.RootSSN: tnt4j-samples
	
	tracker.factory: com.jkoolcloud.tnt4j.tracker.DefaultTrackerFactory
	tracker.default.snapshot.category: DefaultCategory
	
	dump.sink.factory: com.jkoolcloud.tnt4j.dump.DefaultDumpSinkFactory
	event.sink.factory: com.jkoolcloud.tnt4j.sink.impl.BufferedEventSinkFactory
	event.sink.factory.EventSinkFactory: com.jkoolcloud.tnt4j.sink.impl.FileEventSinkFactory
	event.sink.factory.PooledLoggerFactory: com.jkoolcloud.tnt4j.sink.impl.PooledLoggerFactoryImpl
	; For log4j use Log4J Sink Factory below
	; event.sink.factory: com.jkoolcloud.tnt4j.logger.log4j.Log4JEventSinkFactory
	
	; Throttle control MPS (messages/sec) BPS (bytes/sec)
	; event.sink.factory.RateMaxMPS: 100
	; event.sink.factory.RateMaxBPS: 10000
	; event.sink.factory.RateLimit: true
	; < 0 BLOCK_UNTIL_GRANTED, 0 NO_BLOCK, > 0 BLOCK_UNTIL_TIMEOUT in milliseconds
	; event.sink.factory.RateTimeout: -1

	; Configure default sink filter based on level and time (elapsed/wait)
	event.sink.factory.Filter: com.jkoolcloud.tnt4j.filters.EventLevelTimeFilter
	event.sink.factory.Filter.Level: INFO
	
	;Uncomment below to enable duplicate event suppression (reduce event storms)
	;event.sink.factory.Filter.SuppressDups: true
	;event.sink.factory.Filter.SuppressTimeSec: 30
	;event.sink.factory.Filter.SuppressCacheSize: 500

	;Use soundex algorithm to detect duplicate messages (very aggressive)
	;event.sink.factory.Filter.SuppressUseSoundex: true
	
	;Uncomment lines below to filter out events based on elapsed time and wait time
	;Timed event/activities greater or equal to given values will be logged
	;event.sink.factory.Filter.ElapsedUsec: 100
	;event.sink.factory.Filter.WaitUsec: 100
	
	;event.sink.factory: com.jkoolcloud.tnt4j.sink.impl.SocketEventSinkFactory
	;event.sink.factory.Host: localhost
	;event.sink.factory.Port: 6408
	;event.formatter: com.jkoolcloud.tnt4j.format.JSONFormatter
	event.formatter: com.jkoolcloud.tnt4j.format.SimpleFormatter
	activity.listener: com.jkoolcloud.tnt4j.tracker.DefaultActivityListener
	tracking.selector: com.jkoolcloud.tnt4j.selector.DefaultTrackingSelector
	tracking.selector.Repository: com.jkoolcloud.tnt4j.repository.FileTokenRepository
	;sink.log.listener: com.jkoolcloud.tnt4j.examples.MySinkLogHandler
}

;Stanza used for sources that start with com.test and uses BufferedEventSinkFactory
;to buffer events and write them asynchronously
{
	source: com.test
	
	source.factory: com.jkoolcloud.tnt4j.source.SourceFactoryImpl
	source.factory.GEOADDR: New York
	source.factory.DATACENTER: MyDatacenter
	source.factory.RootFQN: RUNTIME=?#SERVER=?#NETADDR=?#DATACENTER=?#GEOADDR=?
	source.factory.RootSSN: tnt4j-test
	
	tracker.factory: com.jkoolcloud.tnt4j.tracker.DefaultTrackerFactory
	dump.sink.factory: com.jkoolcloud.tnt4j.dump.DefaultDumpSinkFactory

	event.sink.factory: com.jkoolcloud.tnt4j.sink.impl.BufferedEventSinkFactory
	; Default TTL (time to live) for all events written to the sink
	; event.sink.factory.TTL: 16000
	event.sink.factory.EventSinkFactory: com.jkoolcloud.tnt4j.sink.impl.FileEventSinkFactory
	event.sink.factory.PooledLoggerFactory: com.jkoolcloud.tnt4j.sink.impl.PooledLoggerFactoryImpl
	;event.sink.factory.EventSinkFactory: com.jkoolcloud.tnt4j.logger.log4j.Log4JEventSinkFactory

	; Configure default sink filter based on level and time (elapsed/wait)
	event.sink.factory.Filter: com.jkoolcloud.tnt4j.filters.EventLevelTimeFilter
	event.sink.factory.Filter.Level: INFO
	; Default TTL (time to live), this value is set for every event passing via the filter
	; event.sink.factory.Filter.TTL: 16000
	; Uncomment lines below to filter out events based on elapsed time and wait time
	; Timed event/activities greater or equal to given values will be logged
	;event.sink.factory.Filter.ElapsedUsec: 100
	;event.sink.factory.Filter.WaitUsec: 100
	
	event.formatter: com.jkoolcloud.tnt4j.format.SimpleFormatter
	activity.listener: com.jkoolcloud.tnt4j.tracker.DefaultActivityListener
	tracking.selector: com.jkoolcloud.tnt4j.selector.DefaultTrackingSelector
	tracking.selector.Repository: com.jkoolcloud.tnt4j.repository.FileTokenRepository
}

;Stanza used for sources that start with org
{
	source: org
	like: com.jkoolcloud
}

