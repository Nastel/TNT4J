{"name":"TNT4J","tagline":"Track and Trace 4 Java API, Application event streaming and logging framework for correlation, diagnostics and tracking of application activities.","body":"Why TNT4J \r\n=====================================\r\nTNT4J is about tracking and tracing activities, transactions, behavior and performance via an easy to use API that behaves much like a logging framework.\r\n\r\nWhy track and trace your applications?\r\n* Trace application behavior, performance to improve diagnostics\r\n* Track end-user behavior to improve usability, customer satisfaction\r\n* Track topology, communications, relationships between entities\r\n* Track messages, binary, text, video, image, voice, etc.\r\n* Track location, mobility, GPS of your applications, users\r\n* Track anything worth tracking in your application\r\n* Know you application: what, where, when, why \r\n\r\n<b>Several key features make TNT4J a prime choice for your java application:</b>\r\n\r\n### SLF4J & LOG4J Integration\r\nTNT4J integrates with SLF4J & LOG4J. Other logging frameworks can be supported by implementing `EventSinkFactory` & `EventSink` interfaces. \r\nTNT4J default integration is with SLF4J. \r\n\r\nAll TNT4J messages can be routed via a SLF4J/LOG4J event sink and therefore can take advantage of the underlying logging framework. \r\nTNT4J includes `TNT4JAppender` for log4j & Logback (SLF4J) which allows developers to send event messages to TNT4J via this corresponding appenders and take advantage of TNT4J functionality.\r\n\r\nDevelopers may also enrich event messages and pass context to TNT4J using hashtag enrichment scheme. Hash tags are used to decorate event messages with important meta data about each log message. This meta data is used to generate TNT4J tracking events:\r\n```java\r\nlogger.info(\"Starting a tnt4j activity #beg=Test, #app=\" + Log4JTest.class.getName());\r\nlogger.warn(\"First log message #app=\" + Log4JTest.class.getName() + \", #msg='1 Test warning message'\");\r\nlogger.error(\"Second log message #app=\" + Log4JTest.class.getName() + \", #msg='2 Test error message'\", new Exception(\"test exception\"));\r\nlogger.info(\"Ending a tnt4j activity #end=Test, #app=\" + Log4JTest.class.getName() + \" #%i/order-no=\" + orderNo  + \" #%d:currency/amount=\" + amount);\r\n```\r\nAbove example groups messages between first and last into a related logical collection called `Activity`. Activity is a collection of logically related events/messages. Hash tags `#beg`, `#end` are used to demarcate activity boundaries. This method also supports nested activities.\r\n\r\nUser defined fields can be reported using `#[data-type][:value-type]/your-metric-name=your-value` convention (e.g. `#%i/order-no=62627` or `#%d:currency/amount=50.45`). \r\n`TNT4JAppender` supports the following optional `data-type` qualifiers:\r\n```\r\n\t%i/ -- integer\r\n\t%l/ -- long\r\n\t%d/ -- double\r\n\t%f/ -- float\r\n\t%b/ -- boolean\r\n\t%n/ -- number\r\n\t%s/ -- string\r\n```\r\nAll `value-type` qualifiers are defined in `com.nastel.jkool.tnt4j.core.ValueTypes`. Examples:\r\n```\r\n\tcurrency \t-- generic currency\r\n\tflag \t\t-- boolean flag\r\n\tage \t\t-- age in time units\r\n\tguid \t\t-- globally unique identifier\r\n\tguage\t\t-- numeric gauge\r\n\tcounter\t\t-- numeric counter\r\n\tpercent\t\t-- percent\r\n\ttimestamp\t-- timestamp\r\n\taddr \t\t-- generic address\r\n```\r\nNot specifying a qualifier defaults to auto detection of type by `TNT4JAppender`. First `number` qualifier is tested and defaults to `string` if the test fails (e.g. `#order-no=62627`). User defined fields are reported as a TNT4J snapshot with `Log4j` category and snapshot name set to activity name set by `#beg`, `#end`, `#opn` tags.\r\n\r\nBelow is a sample log4j appender configuration:\r\n```\r\n### Default TNT4J Appender configuration\r\nlog4j.appender.tnt4j=com.nastel.jkool.tnt4j.logger.log4j.TNT4JAppender\r\nlog4j.appender.tnt4j.SourceName=com.log4j.Test\r\nlog4j.appender.tnt4j.SourceType=APPL\r\nlog4j.appender.tnt4j.MetricsOnException=true\r\nlog4j.appender.tnt4j.MetricsFrequency=60\r\nlog4j.appender.tnt4j.layout=org.apache.log4j.PatternLayout\r\nlog4j.appender.tnt4j.layout.ConversionPattern=%d{ABSOLUTE} %-5p [%c{1}] %m%n\r\n```\r\n### Performance\r\nNo need to concatenate messages before logging. String concatenation is expensive especialy in loops. Simply log using message patterns as follows and TNT4J will resolve the message only if it actually gets logged:\r\n```java\r\nlogger.debug(\"My message {0}, {1}, {2}\", arg0, arg1, arg3);\r\n```\r\nTNT4J enhances logging performance by supporting asynchronous pooled logging, which delegates logging to a dedicated thread pool. Use `BufferedEventSinkFactory` in your `tnt4.properties` configuration to enable this feature. See example below: \r\n```\r\n...\r\nevent.sink.factory: com.nastel.jkool.tnt4j.sink.BufferedEventSinkFactory\r\nevent.sink.factory.EventSinkFactory: com.nastel.jkool.tnt4j.logger.log4j.Log4JEventSinkFactory\r\n...\r\n```\r\n### Simplicity & Clean Code\r\nNo need to check for `isDebugEnabled()` before logging messages. Just register your own `SinkEventFilter` and consolidate all checking into a single listener.\r\n```java\t\r\nlogger.addSinkEventFilter(new MyLogFilter()); \r\n...\r\nlogger.debug(\"My message {0}, {1}, {2}\", arg0, arg1, arg2);\r\n```\r\n\r\nAll conditional logging can be consolidated into a single listener object. \r\n\r\n### Flexible Filtering\r\nFilter out not only based on category/severity (as log4j), but also based on performance objectives. Example: log events only if their elapsed time or wait times are greater than a ceratin value. TNT4J allows users to register filters within `tnt4j.properties` without changing application code. Create your own filters which would allow you to filter events out based on user defined criteria and inject filters using `tnt4j.properties`.\r\nSee  `tnt4j.properties` and `com.nastel.jkool.tnt4j.filters.EventLevelTimeFilter` for details.\r\nRegister filters via declarations in `tnt4j.properties` or in your application by creating your own event filter.\r\n```java\r\nlogger.addSinkEventFilter(new ThresholdEventFilter(OpLevel.WARNING));\r\n```\r\nBelow is an example of an event sink filter `ThresholdEventFilter` which must implement `SinkEventFilter` interface.\r\n```java\r\npublic class ThresholdEventFilter implements SinkEventFilter {\r\n\tOpLevel threshold = OpLevel.INFO;\r\n\r\n\tpublic ThresholdEventFilter() {\r\n\t}\r\n\r\n\tpublic ThresholdEventFilter(OpLevel level) {\r\n\t\tthis.threshold = level;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean filter(EventSink sink, TrackingEvent event) {\r\n\t\treturn (event.getSeverity().ordinal() >= threshold.ordinal()) && sink.isSet(event.getSeverity());\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean filter(EventSink sink, TrackingActivity activity) {\r\n\t\treturn (activity.getSeverity().ordinal() >= threshold.ordinal()) && sink.isSet(activity.getSeverity());\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean filter(EventSink sink, Snapshot snapshot) {\r\n\t\treturn (snapshot.getSeverity().ordinal() >= threshold.ordinal()) && sink.isSet(snapshot.getSeverity());\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean filter(EventSink sink, OpLevel level, String msg, Object... args) {\r\n\t\treturn (level.ordinal() >= threshold.ordinal()) && sink.isSet(level);\r\n\t}\r\n}\r\n```\r\n\r\n### Granular conditional logging\r\nLog only what matters. Increase performance of your applications by decreasing the amount of logging your application produces while increasing the relevance and quality of the output.\r\n\r\n```java\r\nif (logger.isSet(OpLevel.DEBUG)) {\r\n\tlogger.debug(\"My message {0}, {1}, {2}\", arg0, arg1, arg2);\r\n}\r\nif (logger.isSet(OpLevel.DEBUG, \"myapp.mykey\", myvalue)) {\r\n\tlogger.debug(\"My message {0}, {1}, my.value={2}\", arg0, arg1, myvalue);\r\n}\r\n```\r\n\r\nChecking a global debug flag is not granular enough for most applications. Many java apps require granular tracking to log only what matters based on specific context.\r\nConsolidate conditional checks (`logger.isSet()`) into `SinkEventFilter` implementation and register with the tracker instance.\r\n```java\r\nlogger.addSinkEventFilter(new MyLogFilter());\r\n```\r\n\r\n### Share logging context across apps\r\nPass logging context across threads or applications.\r\n```java\r\nlogger.set(OpLevel.DEBUG, \"myapp.mykey\", myvalue);\r\n```\r\n\r\nImagine writing an application that has to pass tracking context/flag to applications downstream, how would you do that?\r\nTNT4J lets you set and get conditional variables within and across application boundaries.\r\n\t\r\nSet and check tracking context as follows (track all requests matching a specific zip code only):\r\n```java\r\n// set level, key & value pair\r\nlogger.set(OpLevel.DEBUG, \"zip-code\", trackZipCode);\r\n..\r\n..\r\n// check for sev, key & value pair match\r\nString zipCode = request.getZipCode();  // example request containing a zip code\r\nif (logger.isSet(OpLevel.DEBUG, \"zip-code\", zipCode)) {\r\n\t// your conditional logic here\r\n}\r\n```\r\n\r\n### State logging\r\nLog application state to improve diagnostics of performance, resource utilization and other tough problems which are difficult  to trace using standard event logging techniques. Simply register your state dump provider (see `DumpProvider` interface) and export state variables specific to you application. Dump providers can be called on VM shutdown or on demand.\r\n\r\nGenerate application dump on demand.\r\n```java\r\n// register your dump provider\r\nTrackingLogger.addDumpProvider(new MyDumpProvider());\r\n...\r\nTrackingLogger.dumpState();\r\n```\r\n\r\n### Measurements & Metrics\r\nTNT4J is not just about logging messages, it is also about measurements and metrics such as response time, CPU, memory, block/wait times as well as user defined metrics. TNT4J lets you report metrics at the time of the logged event.\r\nBelow is an example of creating a snapshot (collection of metrics) and attaching it to an activity:\r\n```java\r\n// post processing of activity: enrich activity with application metrics\r\nTrackingLogger logger = TrackingLogger.getInstance(this.getClass());\r\nTrackingActivity activity = logger.newActivity(OpLevel.INFO, \"Order\");\r\n...\r\nPropertySnapshot snapshot = logger.newSnapshot(\"Order\", \"Payment\");\r\nsnapshot.add(\"order-no\", orderNo, ValueTypes.VALUE_TYPE_ID);\r\nsnapshot.add(\"order-amount\", orderAmount, ValueTypes.VALUE_TYPE_CURRENCY);\r\nactivity.add(snapshot); // add property snapshot associated with this activity\r\n...\r\nlogger.tnt(activity); // report activity and associated snapshots as a single entity\r\n```\r\nA `Snapshot` is a collection of name, value pairs called `Property`. Each `Property` can be further qualified with a value type defined in `ValueTypes` class.\r\n\r\nBelow is an example of reporting a snapshot:\r\n```java\r\n// post processing of activity: enrich activity with application metrics\r\nTrackingLogger logger = TrackingLogger.getInstance(this.getClass());\r\nTrackingActivity activity = logger.newActivity(OpLevel.INFO, \"Order\");\r\n...\r\nPropertySnapshot snapshot = logger.newSnapshot(\"Order\", \"Payment\");\r\nsnapshot.add(\"order-no\", orderNo, ValueTypes.VALUE_TYPE_ID);\r\nsnapshot.add(\"order-amount\", orderAmount, ValueTypes.VALUE_TYPE_CURRENCY);\r\nactivity.tnt(snapshot); // add and report property snapshot associated with this activity\r\n```\r\nBelow is an example of reporting standalone snapshot:\r\n```java\r\n// post processing of activity: enrich activity with application metrics\r\nTrackingLogger logger = TrackingLogger.getInstance(this.getClass());\r\n...\r\nPropertySnapshot snapshot = logger.newSnapshot(\"Order\", \"Payment\");\r\nsnapshot.add(\"order-no\", orderNo, ValueTypes.VALUE_TYPE_ID);\r\nsnapshot.add(\"order-amount\", orderAmount, ValueTypes.VALUE_TYPE_CURRENCY);\r\nlogger.tnt(snapshot); // report a property snapshot\r\n```\r\n### Correlation, Topology, Time Synchronization\r\nDevelopers can relate events by grouping them into activities (activity is a collection of related events and sub-activities) or passing context -- correlator(s). Activity grouping and correlators create connectivity between events across thread, applications, server, runtime, location boundaries. TNT4J allows attachment of correlators when reporting tracking events: see `TrackingLogger.tnt(..)` calls for details. The API also allows relating tracking events across application and runtime boundaries using the same mechanism.\r\n\r\n`TrackingLogger.tnt(..)` also allows developers to specify the flow of messages using `OpType.SEND` and `OpType.RECEIVE` modifiers. These modifiers let developers specify message flow & direction. This is especially useful for applications that pass information via network, middleware, messaging or any other communication mechanism. Tracking events with such modifiers specify graph/topology information required for root cause analysis as well as visualization of message flow.\r\n\r\nBelow is an example of a sender application:\r\n```java\r\n// post processing of activity: enrich activity with application metrics\r\nTrackingLogger logger = TrackingLogger.getInstance(this.getClass());\r\n\r\n// report sending an order with a specific correlator (order_id)\r\nlogger.tnt(OpLevel.INFO, OpType.SEND, \"SendOrder\", order_id, \r\n\telasped_time, \"Sending order to={0}\", destination);\r\n// sending logic\r\n....\r\n....\r\n```\r\nHere is an example of a receiver application:\r\n```java\r\n// post processing of activity: enrich activity with application metrics\r\nTrackingLogger logger = TrackingLogger.getInstance(this.getClass());\r\n...\r\n// report received an order with a specific correlator (order_id)\r\nlogger.tnt(OpLevel.INFO, OpType.RECEIVE, \"ReceiveOrder\", order_id,\r\n\telasped_time, \"Received order from={0}\", source);\r\n```\r\n\r\n<b>NOTE:</b> TNT4J uses NTP natively to synchronize times across servers to enable cross server event correlation in time. To enable NTP time synchronization define java property `-Dtnt4j.time.server=ntp-server:123`. \r\n\r\n<b>TIP:</b> Developers should use `TimeServer.currentTimeMillis()` instead of `System.currentTimeMillis()` to obtain time adjusted to NTP time. TNT4J also maintains a microsecond resolution clock using `Useconds.CURRENT.get()` which returns the number of microseconds between the current time and midnight, January 1, 1970 UTC (NTP adjusted). TNT4J automatically measures and adjusts clock drift between NTP, `System.currentTimeMillis()` and `System.nanoTime()` clocks to ensure accurate microsecond precision/accuracy timing spanning VMs, devices, servers, geo locations.\r\n\r\n### Logging Statistics\r\nTNT4J keeps detailed statistics about logging activities. Each logger instance maintains counts of logged events, messages, errors, overhead in usec and more. Do you know the overhead of your logging framework on your application?\r\n\r\nObtain a map of all available key/value pairs:\r\n```java\r\nMap<String, Long> stats = logger.getStats();\r\nSystem.out.println(\"Logger stats: \" + stats);\r\n...\r\nSystem.out.println(\"Resetting logger stats\");\r\nlogger.resetStats();\r\n```\r\nObtain metrics for all available trackers:\r\n```java\r\nList<TrackingLogger> loggers = TrackingLogger.getAllTrackers();\r\nfor (TrackingLogger lg: loggers) {\r\n\tMap<String, Long> stats = lg.getStats();\r\n\tprintStats(stats); // your call to print out tracker statistics\r\n\t...\r\n}\r\n```\r\nTNT4J keeps track of stack traces for all `TrackingLogger` allocations. Below is an example of how to get stack frames for a set of `TrackingLogger` instances:\r\n```java\r\n// obtain all available tracker instances\r\nList<TrackingLogger> loggers = TrackingLogger.getAllTrackers();\r\nfor (TrackingLogger lg: loggers) {\r\n\tStackTraceElement[] stack = TrackingLogger.getTrackerStackTrace(lg);\r\n\tUtils.printStackTrace(\"Tracker stack trace\", stack, System.out);\r\n\t...\r\n}\r\n```\r\n\r\n## Quick Examples\r\nHere is a simple example of using TNT4J:\r\n\r\n```java\r\nTrackingLogger logger = TrackingLogger.getInstance(this.getClass());\r\ntry {\r\n   ...\r\n} catch (Exception e) {\r\n   logger.error(\"Failed to process request={0}\", request_id, ex);\r\n}\r\n```\r\nBelow is an example of using correlator and a relative class marker to locate caller's method call on the stack -- `$my.package.myclass:0`. This marker will resolve to the caller's method name above all the calls that start with `$my.package.myclass`.\r\n\r\n```java\r\nTrackingLogger logger = TrackingLogger.getInstance(this.getClass());\r\ntry {\r\n   ...\r\n} catch (Exception e) {\r\n   logger.tnt(OpLevel.ERROR, \"$my.package.myclass:0\", myCorrelator, \r\n   \t\"Failed to process request={0}\", request_id, ex);\r\n}\r\n```\r\nConsolidate all conditional logging checks into a single listener. Why call `isDebugEnabled()` before each log entry?\r\n\r\n```java\r\nTrackingLogger logger = TrackingLogger.getInstance(this.getClass());\r\nlogger.addSinkEventFilter(new MyEventFilter(logger));\r\ntry {\r\n   logger.debug(\"My debug message {0}, {1}\", arg0, arg1); // no need to gate this call\r\n   ...\r\n} catch (Exception e) {\r\n   logger.error(\"Failed to process request={0}\", request_id, ex);\r\n}\r\n\r\nclass MyEventFilter implements SinkEventFilter {\r\n\tTaskLogger logger;\r\n\r\n\tMyEventFilter(TaskLogger lg) {\r\n\t\tlogger = lg;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean filter(EventSink arg0, TrackingEvent event) {\r\n\t\treturn logger.isSet(event.getSeverity(), \"myappl.token\");\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean filter(EventSink arg0, TrackingActivity activity) {\r\n\t\treturn logger.isSet(activity.getSeverity(), \"myappl.token\");\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean filter(EventSink sink, Snapshot snapshot) {\r\n\t\treturn logger.isSet(snapshot.getSeverity(), \"myappl.token\");\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic boolean filter(EventSink arg0, OpLevel level, String msg, Object... args) {\r\n\t\treturn logger.isSet(level, \"myappl.token\");\r\n\t}\r\n}\r\n```\r\nEmbed TNT4J into your application and realize the benefits in matter if minutes. TNT4J can take advantage of other lower level logging frameworks such as log4j, slf4j. Default TNT4J binding is based on slf4j.\r\n\r\nAbout TNT4J\r\n======================================\r\n\r\nTrack and Trace 4 Java API, Application logging framework for correlation, diagnostics and tracking of application activities within and across <b>multiple applications, runtime, servers, geo locations. This API is specifically designed to troubleshoot distributed, concurrent, multi-threaded, composite applications</b> and includes activity correlation, application state dumps, performance and user defined metrics.\r\n\r\nHere is short list of TNT4J features:\r\n\r\n* Simple programming model to facilitate fast root-cause, log analysis\r\n* Automated timing of application activities and sub-activities (elapsed, idle time, message age)\r\n* Application state dump framework for reporting internal variables, data structures\r\n* Granular conditional logging based on application tokens, patterns, that can be shared across applications, runtime\r\n* Share logging context across application, thread, runtime boundaries\r\n* Inter-log correlation of log entries (correlators and tags) between multiple related applications\r\n* Intra-log correlation of related activities and sub-activities between multiple applications and threads\r\n* Event location tags such as GPS, server etc.\r\n* Message flow direction for composite applications that exchange messages (e.g. SOAP, JMS, and SQL etc.)\r\n* User defined properties such as CPU, memory logging, thread statistics per process/thread\r\n* Extensible activity, sink, error listeners for pre, post event processing\r\n* Granular context such as thread id, process id, server, application name\r\n\r\nSee TNT4J tutorial (http://www.slideshare.net/AlbertMavashev/open-source-application-behavior-tnt4j-tutorial)\r\nSee Getting Started (https://github.com/Nastel/TNT4J/wiki/Getting-Started) for quick reference on TNT4J.\r\nWiki is available at https://github.com/Nastel/TNT4J/wiki\r\n\r\nTNT4J Mission\r\n=======================================\r\n* Standard way to track application behavior, activities across users, apps, servers, devices, threads\r\n* Dramatically reduce time it takes to troubleshoot application behavior using logging paradigm\r\n* Performance metrics and application state to reduce diagnostic time\r\n* Simple programming model for ease of use\r\n* Improve quality and readability of logs to accelerate diagnostics\r\n* Enrich log entries for automated analysis. Manual analysis is just painfully long\r\n* Decrease or eliminate development of custom code required to track behavior and activities\r\n* Independent of the underlying storage, formats\r\n\r\nTNT4J Concepts\r\n========================================\r\nTNT4J is fully plug-in and play tracking, tracing and logging framework that consists of the following basic constructs:\r\n\r\n* <b>Tracker</b> -- high level object that allows developer to track, trace and log application activities\r\n* <b>Activity</b> -- a collection of related tracking events (TrackingEvent) and other sub-activities, relation is established via a grouping specified by a developer or set of correlators (across thread, application boundaries). Activities may have a set of uder defined properties which are grouped into property snapshots (PropertySnapshot).\r\n* <b>Tracking Event</b> -- a message with associated start/stop time stamps, severity, user defined message, correlator, tag, location (such as GPS, server etc) and other event properties.\r\n* <b>Property</b> -- key, value pair\r\n* <b>Property snapshot</b> -- a collection of properties with category, name and a time stamp associated with when snapshot is taken. Activities may have one or more property snapshots.\r\n* <b>Formatter</b> -- an object responsible for formatting underlying TNT4J objects such as Activity, Tracking Event and convert into a formatted string.\r\n* <b>Tracking Selector</b> -- an object associated with a Tracker that allows developers to perform conditional logging based on a given set of severity, key, value combination. Such combinations are stored in token repository.\r\n* <b>Token Repository</b> -- an underlying storage used by tracking selector that actually stores and maintains severity, key, value combinations. Such repository can be backed by a file, cache, memory or any other desired medium. Token repositories can be shared accross application boundaries and therefore conditional logging can span multiple applications, runtimes, geo locations.\r\n* <b>Sink</b> -- sink is a basic destination where objects can be written (e.g file, socket, http, etc.)\r\n* <b>Event Sink</b> -- destination where events, activities and messages are recorded. Such destination can be file, socket. Sinks are associated with formatters which are called to format objects before writing to the sink.\r\n* <b>Dump Sink</b> -- sink where application dumps are recorded.\r\n* <b>Dump</b> -- a property snapshot that deals with application state (name, value pairs). Application can generate user defined dumps to report application specific metrics during diagnostics, on demand or VM shutdown.\r\n* <b>Dump Provider</b> -- user defined implementation that actually generates application Dumps.\r\n\r\nHow to Build TNT4J\r\n=========================================\r\n\r\nRequirements\r\n* JDK 1.7+\r\n* ANT (http://ant.apache.org/)\r\n\r\nTNT4J depends on the following external packages:\r\n* Apache commons configuration 1.10 (http://commons.apache.org/proper/commons-configuration/)\r\n* Apache commons lang 2.6 (http://commons.apache.org/proper/commons-lang/)\r\n* Apache commons lang3 3.3.2 (http://commons.apache.org/proper/commons-lang/)\r\n* Apache commons logging 1.2.17 (http://commons.apache.org/proper/commons-logging/)\r\n* Apache commons net 3.3 (http://commons.apache.org/proper/commons-net/)\r\n* Apache commons codec 1.9 (http://commons.apache.org/proper/commons-codec/)\r\n* Apache Log4J 1.2.17 (http://logging.apache.org/log4j/1.2/)\r\n* SLF4J 1.7.12 (http://www.slf4j.org/)\r\n* Logback Project 1.1.3 (http://logback.qos.ch/)\r\n* Java UUID Generator (JUG) 3.1.3 (http://wiki.fasterxml.com/JugHome/)\r\n\r\nTo build TNT4J:\r\n* Download the above libraries and place into the tnt4j-master/lib folder\r\n* Compile and build using ANT: \r\n\t* ant all (run \"ant clean\" for clean builds)\r\n\t* Check ../build/tnt4j for output\r\n\t* JavaDoc will be located under ../build/tnt4j/doc\r\n\t\r\nRunning Samples\r\n===============================================\r\n* Simple TNT4J Sample application (`com.nastel.jkool.tnt4j.examples.TNT4JTest`):\r\n```java\t\r\njava -javaagent:tnt4j-api.jar -Dtnt4j.config=config/tnt4j.properties -Dtnt4j.token.repository=config/tnt4j-tokens.properties  -Dtnt4j.dump.on.vm.shutdown=true -Dtnt4j.dump.provider.default=true -Dtnt4j.formatter.json.newline=true -classpath tnt4j-api-final-all.jar com.nastel.jkool.tnt4j.examples.TNT4JTest com.myco.TestApp MYSERVER \"Test log message\" correlator1 \"TestCommand\"  TestLocation\r\n```\r\n* Directory Monitor (`com.nastel.jkool.tnt4j.examples.FolderMonitor`)\r\n```java\t\r\njava -Dtnt4j.config=config/tnt4j.properties -Dtnt4j.dump.on.vm.shutdown=true -Dtnt4j.dump.provider.default=true -classpath tnt4j-api-final-all.jar com.nastel.jkool.tnt4j.examples.FolderMonitor com.test.FolderMonitor /temp\r\n```\r\n<b>Command line arguments:</b>\r\n* `-javaagent:tnt4j-api.jar` command line option is required by `ObjectDumpProvider` to calculate object deep and shallow memory sizes. Use this only if your application makes use of `ObjectDumpProvider` to dump object state.\r\n* `-Dtnt4j.dump.on.vm.shutdown=true` java property allows application state dumps generated automatically upon VM shutdown.\r\n* `-Dtnt4j.dump.provider.default=true` java property registers all default dump providers (memory, stack, logging stats).\r\n* `-Dtnt4j.formatter.json.newline=true` java property directs `JSONFormatter` to append new line when formatting log entries.\r\n\r\nSee `<timestamp>.log` and `<vmid>.dump` file for output produced by `com.nastel.jkool.tnt4j.examples.TNT4JTest`.\r\nSee `config/tnt4j.properties` for TNT4J configuration: factories, formatters, listeners, etc. See Wiki for more information.\r\n\r\nKnown Projects Using TNT4J\r\n===============================================\r\n* Simple Web End-User Tracking -- TrackingFilter (https://github.com/Nastel/TrackingFilter)\r\n* JMX Streaming Agent - PingJMX (https://github.com/Nastel/PingJMX)\r\n* Cloud Event Streaming Library - JESL (https://github.com/Nastel/JESL)\r\n* Streaming Analytics Service -- jkoolcloud.com (https://www.jkoolcloud.com)\r\n* Application Performance Monitoring -- AutoPilot M6 (http://www.nastel.com/products/autopilot-m6.html)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}